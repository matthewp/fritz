---
import { getCollection } from 'astro:content';

const { docId } = Astro.props;
const collection = await getCollection('docs');

const sortPreferences = ['Introduction', 'Components'];


type CollectionItem = typeof collection[number];
const byCategory = Array.from(collection.reduce(((acc, item) => {
  if(!acc.has(item.data.category)) {
    acc.set(item.data.category, []);
  }
  let items = acc.get(item.data.category)!;
  if(item.data.sort != null) {
    items.splice(item.data.sort, 0, item);
  } else {
    items.push(item);
  }
  return acc;
}), new Map<string, CollectionItem[]>())).sort((a, b) => {
  if(sortPreferences.indexOf(a[0]) > sortPreferences.indexOf(b[0])) return 1;
  else return -1;
});
---
<style>
  aside {
    background: var(--davys-grey);
    border-radius: 7px;
    padding: 1rem 2rem;
    margin-right: 2rem;
    min-width: 13em;
  }

  detail {
    display: block;
    margin: 1.4rem 0;
  }

  summary {
    color: #fff;
    font-weight: 400;
    text-transform: uppercase;
  }

  ol {
    list-style-type: none;
  }

  ol, li {
    margin: .8rem 0;
    padding: 0;
  }

  li.selected {
    font-weight: 600;
  }

  a, a:visited {
    color: var(--bone);
  }
</style>
<aside class={Astro.props['class'] || 'sidebar'}>
  {byCategory.map(([categoryName, items]) => (
    <detail open>
      <summary>{categoryName}</summary>
      <ol>
        {items.map(item => (
          <li class:list={[item.id === docId && 'selected']}>
            <a href={`/fritz/docs/${item.slug}/`}>{item.data.title}</a>
          </li>
        ))}
      </ol>
    </detail>
  ))}


</aside>